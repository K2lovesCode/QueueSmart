{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Parent-Teacher Meeting Queue Management System\n\n## Overview\n\nA real-time web application designed to manage Parent-Teacher Meeting queues, eliminating scheduling conflicts and reducing parent anxiety. The system replaces fixed time slots with dynamic queue management, providing three distinct interfaces for Parents, Teachers, and School Admins. Parents join queues via QR codes or teacher codes, receive simple status updates, and get notified when their turn approaches. Teachers manage their queues through a control panel, while admins oversee the entire system.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack React Query for server state management\n- **Real-time Updates**: WebSocket connection for live queue updates\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with WebSocket support for real-time features\n- **Session Management**: Browser session-based authentication for parents, credential-based for teachers/admins\n- **Real-time Communication**: WebSocket server for broadcasting queue status changes\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema**: Relational design with tables for users, teachers, parent sessions, queue entries, and meetings\n- **Migrations**: Drizzle Kit for database schema management\n\n### Authentication and Authorization\n- **Parent Authentication**: Session-based using browser session IDs stored in localStorage\n- **Teacher/Admin Authentication**: Traditional email/password with secure login\n- **Role-based Access**: Three user roles (parent, teacher, admin) with appropriate permissions\n- **Session Storage**: PostgreSQL-based session management with connect-pg-simple\n\n### Queue Management System\n- **Queue Logic**: Position-based queueing with real-time status updates\n- **Status States**: Three simple states for parents (waiting, next, current)\n- **Notification System**: WebSocket-based notifications for queue progression\n- **Meeting Timer**: Built-in timing system for teacher-parent meetings\n\n### QR Code Integration\n- **QR Generation**: Server-side QR code generation for teacher queues\n- **QR Scanning**: Client-side camera access for QR code scanning\n- **Fallback**: Manual teacher code entry for accessibility\n\n### Mobile-First Design\n- **Responsive Layout**: Mobile-optimized interface using Tailwind breakpoints\n- **Progressive Enhancement**: Works without app installation\n- **Touch-Friendly**: Large buttons and touch targets for mobile devices\n- **Offline Considerations**: WebSocket reconnection handling for network interruptions\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Database Connection**: WebSocket-compatible connection string configuration\n\n### Development Tools\n- **Vite**: Fast development server with Hot Module Replacement\n- **TypeScript**: Type safety across client and server code\n- **ESBuild**: Fast bundling for production builds\n\n### UI Libraries\n- **Radix UI**: Accessible, unstyled UI primitives for complex components\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Icon library for consistent iconography\n\n### Real-time Features\n- **WebSocket (ws)**: Native WebSocket implementation for real-time communication\n- **TanStack React Query**: Server state synchronization and caching\n\n### QR Code Functionality\n- **QRCode Library**: Server-side QR code generation\n- **Browser Camera API**: Client-side camera access for QR scanning\n\n### Styling and Theming\n- **Class Variance Authority**: Type-safe CSS class variants\n- **clsx**: Conditional CSS class composition\n- **PostCSS**: CSS processing with Autoprefixer\n\n### Deployment\n- **Replit Integration**: Development environment optimizations\n- **Production Build**: Optimized builds with proper asset handling","size_bytes":4373},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// CRITICAL FIX: Set trust proxy to 1 (not true) to prevent X-Forwarded-For spoofing\n// and resolve ValidationError from express-rate-limit\napp.set('trust proxy', 1);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  \n  // CRITICAL FIX: Ensure VITE_WS_PORT is properly set for WebSocket connections\n  process.env.VITE_WS_PORT = port.toString();\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2365},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertTeacherSchema, insertParentSessionSchema, insertQueueEntrySchema, insertMeetingSchema } from \"@shared/schema\";\nimport QRCode from \"qrcode\";\nimport { nanoid } from \"nanoid\";\nimport jwt from \"jsonwebtoken\";\nimport rateLimit from \"express-rate-limit\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcryptjs\";\n\ninterface ExtendedWebSocket extends WebSocket {\n  sessionId?: string;\n  userType?: 'parent' | 'teacher' | 'admin';\n  teacherId?: string;\n  parentSessionId?: string;\n  isAuthenticated?: boolean;\n}\n\n// JWT secret for WebSocket authentication\n// CRITICAL SECURITY FIX: Require JWT_SECRET to be set, fail fast if missing\nconst JWT_SECRET = process.env.JWT_SECRET;\nif (!JWT_SECRET) {\n  console.error('FATAL: JWT_SECRET environment variable is required for WebSocket authentication');\n  console.error('Please set JWT_SECRET to a cryptographically secure random string');\n  process.exit(1);\n}\n\n// Validation schemas\nconst parentSessionSchema = z.object({\n  parentName: z.string().min(1).max(100).trim()\n});\n\nconst joinQueueSchema = z.object({\n  teacherCode: z.string().min(4).max(20).trim().toUpperCase(),\n  childName: z.string().min(1).max(100).trim()\n});\n\nconst teacherLoginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1)\n});\n\nconst adminLoginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1)\n});\n\n// Environment-aware rate limiting configuration\nconst RATE_LIMIT_MODE = process.env.RATE_LIMIT_MODE || 'production'; // production | relaxed | disabled\nconst RL_BYPASS_TOKEN = process.env.RL_BYPASS_TOKEN;\nconst isProd = RATE_LIMIT_MODE === 'production';\n\n// Rate limit bypass function for development and testing\nconst shouldBypass = (req: any) => {\n  if (RATE_LIMIT_MODE === 'disabled') return true;\n  if (!isProd) return true;\n  if (RL_BYPASS_TOKEN && req.headers['x-rl-bypass'] === RL_BYPASS_TOKEN) return true;\n  return false;\n};\n\n// General API rate limiter (per-IP)\nconst generalLimiter = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: isProd ? 300 : 1000, // production: 300/min, relaxed: 1000/min\n  message: { error: 'Too many requests from this IP, please try again later.' },\n  trustProxy: 1,\n  standardHeaders: true,\n  legacyHeaders: false,\n  skip: shouldBypass\n});\n\n// Auth rate limiter (per-IP)\nconst authIpLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: isProd ? 20 : 100, // production: 20/15m, relaxed: 100/15m\n  message: { error: 'Too many authentication attempts from this IP, please try again later.' },\n  trustProxy: 1,\n  standardHeaders: true,\n  legacyHeaders: false,\n  skip: shouldBypass\n});\n\n// Auth rate limiter (per-account)\nconst authAccountLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts per account per 15 minutes\n  message: { error: 'Too many login attempts for this account, please try again later.' },\n  trustProxy: 1,\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req) => req.body?.email?.toLowerCase()?.trim() || 'unknown',\n  skip: shouldBypass\n});\n\n// Queue join rate limiter (per-session)\nconst queueJoinLimiter = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: isProd ? 30 : 120, // production: 30/min, relaxed: 120/min\n  message: { error: 'Too many queue join attempts, please try again later.' },\n  trustProxy: 1,\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req, res) => {\n    return req.body?.sessionId || rateLimit.ipKeyGenerator(req, res);\n  },\n  skip: shouldBypass\n});\n\n// JWT token generation for WebSocket authentication\nfunction generateWebSocketToken(sessionId: string, userType: 'parent' | 'teacher' | 'admin', userId?: string): string {\n  return jwt.sign(\n    { sessionId, userType, userId, iat: Date.now() },\n    JWT_SECRET!,\n    { expiresIn: '24h' }\n  );\n}\n\n// Verify WebSocket JWT token\nfunction verifyWebSocketToken(token: string): any {\n  try {\n    return jwt.verify(token, JWT_SECRET!);\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  // Apply general rate limiting to all API routes\n  app.use('/api', generalLimiter);\n\n  // WebSocket connections management\n  const connections = new Map<string, ExtendedWebSocket>();\n\n  wss.on('connection', (ws: ExtendedWebSocket, req) => {\n    const connectionId = nanoid();\n    connections.set(connectionId, ws);\n    ws.isAuthenticated = false;\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        switch (message.type) {\n          case 'authenticate':\n            // Secure WebSocket authentication using JWT token\n            const tokenPayload = verifyWebSocketToken(message.token);\n            if (tokenPayload) {\n              ws.sessionId = tokenPayload.sessionId;\n              ws.userType = tokenPayload.userType;\n              ws.teacherId = tokenPayload.userId;\n              ws.parentSessionId = tokenPayload.sessionId;\n              ws.isAuthenticated = true;\n              \n              ws.send(JSON.stringify({ type: 'authenticated', success: true }));\n            } else {\n              ws.send(JSON.stringify({ type: 'authenticated', success: false, error: 'Invalid token' }));\n              ws.close();\n            }\n            break;\n          default:\n            // Reject any messages from unauthenticated connections\n            if (!ws.isAuthenticated) {\n              ws.send(JSON.stringify({ type: 'error', message: 'Authentication required' }));\n              ws.close();\n            }\n            break;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n        ws.close();\n      }\n    });\n\n    ws.on('close', () => {\n      connections.delete(connectionId);\n    });\n    \n    // Close unauthenticated connections after 10 seconds\n    setTimeout(() => {\n      if (!ws.isAuthenticated) {\n        ws.close();\n      }\n    }, 10000);\n  });\n\n  // Broadcast to specific user types (only authenticated connections)\n  function broadcast(message: any, filter?: (ws: ExtendedWebSocket) => boolean) {\n    connections.forEach((ws) => {\n      if (ws.readyState === WebSocket.OPEN && ws.isAuthenticated && (!filter || filter(ws))) {\n        ws.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  // Parent Routes\n  app.post('/api/parent/session', async (req, res) => {\n    try {\n      // Validate input and prevent session fixation\n      const validatedData = parentSessionSchema.parse(req.body);\n      console.log('Creating parent session with input:', {\n        clientSessionId: req.body.sessionId,\n        parentName: validatedData.parentName\n      });\n      \n      // Server generates secure session ID - never trust client input\n      const secureSessionId = `device-${Date.now()}-${nanoid()}`;\n      console.log('Generated server sessionId:', secureSessionId);\n      \n      const session = await storage.createParentSession({\n        sessionId: secureSessionId,\n        parentName: validatedData.parentName\n      });\n      \n      // Generate WebSocket authentication token\n      const wsToken = generateWebSocketToken(secureSessionId, 'parent');\n      \n      const response = { ...session, wsToken };\n      console.log('Returning session response:', response);\n      res.json(response);\n    } catch (error) {\n      console.error('Error creating parent session:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Invalid input', details: error.errors });\n      }\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get('/api/parent/session/:sessionId', async (req, res) => {\n    try {\n      const session = await storage.getParentSession(req.params.sessionId);\n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get('/api/parent/:sessionId/queues', async (req, res) => {\n    try {\n      const session = await storage.getParentSession(req.params.sessionId);\n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n\n      const queues = await storage.getQueueEntriesForParent(session.id);\n      res.json(queues);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/parent/join-queue', queueJoinLimiter, async (req, res) => {\n    try {\n      // Validate input with proper sanitization\n      const { sessionId } = req.body;\n      const validatedData = joinQueueSchema.parse({ teacherCode: req.body.teacherCode, childName: req.body.childName });\n      \n      \n      const session = await storage.getParentSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n\n      const teacher = await storage.getTeacherByCode(validatedData.teacherCode);\n      if (!teacher) {\n        return res.status(404).json({ error: 'Teacher not found' });\n      }\n\n      // Check if parent is already in this specific teacher's queue (including skipped entries)\n      const parentAlreadyInQueue = await storage.isParentInTeacherQueue(session.id, teacher.id);\n      \n      if (parentAlreadyInQueue) {\n        return res.status(400).json({ error: 'You are already in this teacher\\'s queue' });\n      }\n\n      const existingQueue = await storage.getQueueEntriesForTeacher(teacher.id);\n      const isFirstInQueue = existingQueue.length === 0;\n\n      // CRITICAL FIX: Check if parent is in active meeting BEFORE creating queue entry\n      let initialStatus = 'waiting';\n      if (isFirstInQueue) {\n        const parentInMeeting = await storage.isParentInActiveMeeting(session.id);\n        initialStatus = parentInMeeting ? 'skipped' : 'current';\n      }\n\n      // Use transaction to prevent position collision race condition\n      const queueEntry = await storage.createQueueEntry({\n        teacherId: teacher.id,\n        parentSessionId: session.id,\n        childName: validatedData.childName,\n        status: initialStatus\n      });\n\n      // If first person and parent is available, try to create meeting atomically\n      if (isFirstInQueue && initialStatus === 'current') {\n        const meetingResult = await storage.createMeetingIfTeacherFree({\n          teacherId: teacher.id,\n          queueEntryId: queueEntry.id\n        });\n        \n        if (meetingResult.success && meetingResult.meeting) {\n          await storage.updateQueueEntry(queueEntry.id, {\n            status: 'current',\n            startedAt: new Date()\n          });\n\n          // Notify parent their turn is now\n          broadcast({\n            type: 'status_update',\n            queueEntryId: queueEntry.id,\n            status: 'current',\n            message: 'YOUR TURN NOW!'\n          }, (ws) => ws.userType === 'parent' && ws.parentSessionId === session.id);\n\n          // Broadcast meeting started to teachers and admins\n          broadcast({\n            type: 'meeting_started',\n            teacherId: teacher.id,\n            meeting: meetingResult.meeting\n          }, (ws) => (ws.userType === 'teacher' && ws.teacherId === teacher.id) || ws.userType === 'admin');\n        } else {\n          // Meeting creation failed, mark as waiting and notify parent\n          await storage.updateQueueEntry(queueEntry.id, {\n            status: 'waiting'\n          });\n          \n          broadcast({\n            type: 'status_update',\n            queueEntryId: queueEntry.id,\n            status: 'waiting',\n            message: 'You are in the queue. We\\'ll notify you when it\\'s getting close.'\n          }, (ws) => ws.userType === 'parent' && ws.parentSessionId === session.id);\n        }\n      } else if (isFirstInQueue && initialStatus === 'skipped') {\n        // Notify parent their turn was skipped\n        broadcast({\n          type: 'status_update',\n          queueEntryId: queueEntry.id,\n          status: 'skipped',\n          message: 'Your turn was skipped because you are currently in another meeting. You will have priority when your current meeting ends.'\n        }, (ws) => ws.userType === 'parent' && ws.parentSessionId === session.id);\n      }\n\n      // Broadcast queue update to teacher\n      broadcast({\n        type: 'queue_update',\n        teacherId: teacher.id,\n        queueEntry\n      }, (ws) => ws.userType === 'teacher' && ws.teacherId === teacher.id);\n\n      // Broadcast to admin\n      broadcast({\n        type: 'queue_update',\n        teacherId: teacher.id\n      }, (ws) => ws.userType === 'admin');\n\n      res.json(queueEntry);\n    } catch (error) {\n      console.error('Error joining queue:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Teacher Routes\n  app.post('/api/teacher/login', authIpLimiter, authAccountLimiter, async (req, res) => {\n    try {\n      // Validate input data with proper sanitization\n      const validatedData = teacherLoginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(validatedData.email);\n      if (!user || user.role !== 'teacher') {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n      \n      // CRITICAL SECURITY FIX: Use bcrypt to verify hashed passwords\n      const isPasswordValid = await bcrypt.compare(validatedData.password, user.password);\n      if (!isPasswordValid) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n      \n      const teacher = await storage.getTeacherByUserId(user.id);\n      if (!teacher) {\n        return res.status(404).json({ error: 'Teacher profile not found' });\n      }\n\n      // Generate WebSocket authentication token for teacher\n      const wsToken = generateWebSocketToken(teacher.id, 'teacher', teacher.id);\n      \n      res.json({ user, teacher, wsToken });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Invalid input', details: error.errors });\n      }\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get('/api/teacher/:teacherId', async (req, res) => {\n    try {\n      const teacher = await storage.getTeacher(req.params.teacherId);\n      if (!teacher) {\n        return res.status(404).json({ error: 'Teacher not found' });\n      }\n      res.json(teacher);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get('/api/teacher/:teacherId/queue', async (req, res) => {\n    try {\n      const queue = await storage.getQueueEntriesForTeacher(req.params.teacherId);\n      res.json(queue);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get('/api/teacher/:teacherId/current-meeting', async (req, res) => {\n    try {\n      const meeting = await storage.getCurrentMeeting(req.params.teacherId);\n      res.json(meeting || null);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/teacher/:teacherId/end-meeting', async (req, res) => {\n    try {\n      const teacherId = req.params.teacherId;\n      const currentMeeting = await storage.getCurrentMeeting(teacherId);\n      \n      if (currentMeeting) {\n        await storage.endMeeting(currentMeeting.id);\n        \n        // Update current queue entry to completed\n        await storage.updateQueueEntry(currentMeeting.queueEntryId, {\n          status: 'completed',\n          completedAt: new Date()\n        });\n\n        // Get the completed entry to notify the parent and process their other queues\n        const completedEntry = await storage.getQueueEntry(currentMeeting.queueEntryId);\n        if (completedEntry) {\n          broadcast({\n            type: 'queue_removed',\n            queueEntryId: completedEntry.id,\n            message: 'Your meeting has ended. Thank you!'\n          }, (ws) => ws.userType === 'parent' && ws.parentSessionId === completedEntry.parentSessionId);\n          \n          // Process any skipped queues for this parent with broadcast function\n          await storage.processQueueAfterMeetingEnd(completedEntry.parentSessionId, broadcast);\n        }\n      }\n\n      // Use the improved queue advancement logic\n      const advanceResult = await storage.advanceQueueForTeacher(teacherId, broadcast);\n      \n      if (advanceResult.meeting) {\n        // Broadcast meeting started to teacher and admin\n        broadcast({\n          type: 'meeting_started',\n          teacherId,\n          meeting: advanceResult.meeting\n        }, (ws) => (ws.userType === 'teacher' && ws.teacherId === teacherId) || ws.userType === 'admin');\n      }\n\n      // Broadcast updates to teacher and admin\n      broadcast({\n        type: 'meeting_ended',\n        teacherId\n      }, (ws) => (ws.userType === 'teacher' && ws.teacherId === teacherId) || ws.userType === 'admin');\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/teacher/:teacherId/extend-meeting', async (req, res) => {\n    try {\n      const currentMeeting = await storage.getCurrentMeeting(req.params.teacherId);\n      if (!currentMeeting) {\n        return res.status(404).json({ error: 'No active meeting' });\n      }\n\n      await storage.extendMeeting(currentMeeting.id, 300); // 5 minutes\n\n      // Notify next parent about delay\n      const queue = await storage.getQueueEntriesForTeacher(req.params.teacherId);\n      if (queue.length > 0) {\n        const nextEntry = queue[0];\n        broadcast({\n          type: 'delay_notification',\n          queueEntryId: nextEntry.id,\n          message: 'Slight delay - meeting extended by 5 minutes'\n        }, (ws) => ws.userType === 'parent' && ws.parentSessionId === nextEntry.parentSessionId);\n      }\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/teacher/:teacherId/skip-no-show', async (req, res) => {\n    try {\n      const teacherId = req.params.teacherId;\n      \n      // Use atomic transaction-wrapped skip operation\n      const result = await storage.skipNoShowParent(teacherId, broadcast);\n      \n      if (result.success) {\n        res.json({ success: true });\n      } else {\n        res.status(400).json({ error: result.error });\n      }\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Admin Routes\n  app.post('/api/admin/login', authIpLimiter, authAccountLimiter, async (req, res) => {\n    try {\n      // Validate admin login input\n      const validatedData = adminLoginSchema.parse(req.body);\n      \n      const user = await storage.getUserByUsername(validatedData.email);\n      if (!user || user.role !== 'admin') {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n      \n      // CRITICAL SECURITY FIX: Use bcrypt to verify hashed passwords\n      const isPasswordValid = await bcrypt.compare(validatedData.password, user.password);\n      if (!isPasswordValid) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      // Generate WebSocket authentication token for admin\n      const wsToken = generateWebSocketToken(user.id, 'admin', user.id);\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          role: user.role\n        },\n        wsToken\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: 'Invalid input', details: error.errors });\n      }\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n  \n  app.get('/api/admin/teachers', async (req, res) => {\n    try {\n      const teachers = await storage.getAllTeachers();\n      res.json(teachers);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post('/api/admin/teachers', async (req, res) => {\n    try {\n      const { name, subject, password } = req.body;\n      \n      // Validate only the teacher data, not the password\n      const teacherData = insertTeacherSchema.parse({ name, subject });\n      \n      // Create user account for teacher\n      const username = teacherData.name.toLowerCase().replace(/\\s+/g, '.') + '@school.edu';\n      const teacherUser = await storage.createUser({\n        username,\n        password: password || 'teacher123', // Use provided password or default\n        role: 'teacher',\n        name: teacherData.name,\n        email: username\n      });\n\n      const teacher = await storage.createTeacher(teacherData, teacherUser.id);\n      \n      // Generate QR code\n      const qrCodeData = JSON.stringify({\n        type: 'teacher_queue',\n        code: teacher.uniqueCode,\n        teacherName: teacher.name,\n        subject: teacher.subject\n      });\n      \n      const qrCodeUrl = await QRCode.toDataURL(qrCodeData);\n      \n      await storage.updateTeacher(teacher.id, { qrCode: qrCodeUrl });\n\n      const updatedTeacher = await storage.getTeacher(teacher.id);\n      \n      broadcast({\n        type: 'teacher_added',\n        teacher: updatedTeacher\n      }, (ws) => ws.userType === 'admin');\n\n      res.json(updatedTeacher);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get('/api/admin/stats', async (req, res) => {\n    try {\n      const teachers = await storage.getAllTeachers();\n      const allQueues = await Promise.all(\n        teachers.map(t => storage.getQueueEntriesForTeacher(t.id))\n      );\n      const activeMeetings = await Promise.all(\n        teachers.map(t => storage.getCurrentMeeting(t.id))\n      );\n\n      const stats = {\n        totalTeachers: teachers.length,\n        activeMeetings: activeMeetings.filter(m => m !== null).length,\n        waitingParents: allQueues.flat().filter(q => q.status === 'waiting' || q.status === 'next').length,\n        completedMeetings: allQueues.flat().filter(q => q.status === 'completed').length\n      };\n\n      res.json(stats);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Get detailed teacher information with queue data for admin\n  app.get('/api/admin/teachers-with-queues', async (req, res) => {\n    try {\n      const teachers = await storage.getAllTeachers();\n      const teachersWithQueues = await Promise.all(\n        teachers.map(async (teacher) => {\n          const queue = await storage.getQueueEntriesForTeacher(teacher.id);\n          const currentMeeting = await storage.getCurrentMeeting(teacher.id);\n          const queueSize = queue.filter(q => q.status === 'waiting' || q.status === 'next').length;\n          const nextParent = queue.find(q => q.status === 'next') || queue.find(q => q.status === 'waiting');\n          \n          // Calculate estimated wait time based on queue position\n          const waitingEntries = queue.filter(q => q.status === 'waiting');\n          const avgMeetingTime = 15; // Average meeting duration in minutes\n          const avgWaitTime = queueSize > 0 ? queueSize * avgMeetingTime : 0;\n\n          return {\n            ...teacher,\n            queueSize,\n            avgWaitTime,\n            currentMeeting,\n            nextParent\n          };\n        })\n      );\n\n      res.json(teachersWithQueues);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Regenerate all QR codes and teacher codes\n  app.post('/api/admin/regenerate-codes', async (req, res) => {\n    try {\n      console.log('Starting regeneration of all codes...');\n      const teachers = await storage.getAllTeachers();\n      console.log(`Found ${teachers.length} teachers to update`);\n      \n      const updatedTeachers = [];\n      \n      // Process teachers sequentially to avoid unique key conflicts\n      for (const teacher of teachers) {\n        console.log(`Regenerating code for teacher: ${teacher.name}`);\n        \n        // Generate new unique code\n        const uniqueCode = await generateUniqueCode(teacher.name);\n        console.log(`Generated new code: ${uniqueCode} for ${teacher.name}`);\n        \n        // Generate new QR code\n        const qrCodeData = JSON.stringify({\n          type: 'teacher_queue',\n          code: uniqueCode,\n          teacher: teacher.name,\n          subject: teacher.subject\n        });\n        const qrCodeUrl = await QRCode.toDataURL(qrCodeData);\n        \n        // Update teacher with new codes\n        const updatedTeacher = await storage.updateTeacher(teacher.id, { \n          uniqueCode, \n          qrCode: qrCodeUrl \n        });\n        \n        console.log(`Updated teacher ${teacher.name} with new code: ${updatedTeacher?.uniqueCode}`);\n        updatedTeachers.push(updatedTeacher);\n      }\n\n      console.log(`Successfully updated ${updatedTeachers.length} teachers`);\n\n      // Broadcast update to all admin users\n      broadcast({\n        type: 'codes_regenerated',\n        teachers: updatedTeachers\n      }, (ws) => ws.userType === 'admin');\n\n      res.json({ \n        success: true, \n        message: 'All codes regenerated successfully',\n        updatedCount: updatedTeachers.length,\n        teachers: updatedTeachers\n      });\n    } catch (error) {\n      console.error('Error regenerating codes:', error);\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Helper function to generate unique codes\n  async function generateUniqueCode(teacherName: string): Promise<string> {\n    const baseCode = teacherName\n      .toUpperCase()\n      .replace(/[^A-Z]/g, '')\n      .substring(0, 4);\n    \n    // Start with timestamp-based suffix for better uniqueness\n    const timestamp = Date.now().toString().slice(-4);\n    let code = baseCode + timestamp;\n    \n    let attempts = 0;\n    while (attempts < 20) {\n      const existingTeacher = await storage.getTeacherByCode(code);\n      if (!existingTeacher) {\n        return code;\n      }\n      \n      // Generate more random suffix\n      const randomSuffix = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\n      code = baseCode + randomSuffix;\n      attempts++;\n    }\n    \n    // Final fallback to completely random code\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    code = '';\n    for (let i = 0; i < 8; i++) {\n      code += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    \n    return code;\n  }\n\n  // Get teacher by code (for QR scanning)\n  app.get('/api/teachers/by-code/:code', async (req, res) => {\n    try {\n      const teacher = await storage.getTeacherByCode(req.params.code);\n      if (!teacher) {\n        return res.status(404).json({ error: 'Teacher not found' });\n      }\n      res.json(teacher);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":27752},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, teachers } from \"@shared/schema\";\nimport QRCode from \"qrcode\";\n\nasync function seedDatabase() {\n  console.log(\"Seeding database...\");\n  \n  try {\n    // Create admin user\n    const [adminUser] = await db.insert(users).values({\n      username: 'admin@school.edu',\n      password: 'admin123',\n      role: 'admin',\n      name: 'School Administrator',\n      email: 'admin@school.edu'\n    }).returning();\n\n    console.log(\"Created admin user:\", adminUser.name);\n\n    // Create teacher users and teachers\n    const teachersData = [\n      {\n        name: \"Mrs. Johnson\",\n        subject: \"Mathematics\",\n        grade: \"Grade 3\",\n        uniqueCode: \"JOHNSON3\",\n        email: \"johnson@school.edu\"\n      },\n      {\n        name: \"Mr. Smith\",\n        subject: \"English Language Arts\",\n        grade: \"Grade 4\",\n        uniqueCode: \"SMITH4\",\n        email: \"smith@school.edu\"\n      },\n      {\n        name: \"Ms. Davis\",\n        subject: \"Science\",\n        grade: \"Grade 2\",\n        uniqueCode: \"DAVIS2\",\n        email: \"davis@school.edu\"\n      },\n      {\n        name: \"Mrs. Wilson\",\n        subject: \"Social Studies\",\n        grade: \"Grade 5\",\n        uniqueCode: \"WILSON5\",\n        email: \"wilson@school.edu\"\n      }\n    ];\n\n    for (const teacherData of teachersData) {\n      // Create teacher user account\n      const [teacherUser] = await db.insert(users).values({\n        username: teacherData.email,\n        password: 'teacher123',\n        role: 'teacher',\n        name: teacherData.name,\n        email: teacherData.email\n      }).returning();\n\n      // Generate QR code data\n      const qrCodeData = JSON.stringify({\n        type: 'teacher_queue',\n        code: teacherData.uniqueCode,\n        teacherName: teacherData.name,\n        subject: teacherData.subject\n      });\n      \n      const qrCodeUrl = await QRCode.toDataURL(qrCodeData);\n\n      // Create teacher profile\n      const [teacher] = await db.insert(teachers).values({\n        userId: teacherUser.id,\n        name: teacherData.name,\n        subject: teacherData.subject,\n        uniqueCode: teacherData.uniqueCode,\n        qrCode: qrCodeUrl,\n        isActive: true\n      }).returning();\n\n      console.log(`Created teacher: ${teacher.name} (${teacher.uniqueCode})`);\n    }\n\n    console.log(\"Database seeded successfully!\");\n    console.log(\"\\nDemo credentials:\");\n    console.log(\"Admin: admin@school.edu / admin123\");\n    console.log(\"Teacher: teacher@school.edu / teacher123\");\n    console.log(\"\\nTeacher codes for testing:\");\n    teachersData.forEach(t => console.log(`${t.name}: ${t.uniqueCode}`));\n\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}\n\nseedDatabase();","size_bytes":2701},"server/storage.ts":{"content":"import { \n  users, teachers, parentSessions, queueEntries, meetings,\n  type User, type InsertUser, type Teacher, type InsertTeacher,\n  type ParentSession, type InsertParentSession, type QueueEntry, \n  type InsertQueueEntry, type Meeting, type InsertMeeting\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sql, isNull } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Teachers\n  getTeacher(id: string): Promise<Teacher | undefined>;\n  getTeacherByCode(code: string): Promise<Teacher | undefined>;\n  getTeacherByUserId(userId: string): Promise<Teacher | undefined>;\n  getAllTeachers(): Promise<Teacher[]>;\n  createTeacher(teacher: InsertTeacher, userId: string): Promise<Teacher>;\n  updateTeacher(id: string, updates: Partial<Teacher>): Promise<Teacher | undefined>;\n  \n  // Parent Sessions\n  getParentSession(sessionId: string): Promise<ParentSession | undefined>;\n  createParentSession(session: InsertParentSession): Promise<ParentSession>;\n  \n  // Parent Meeting Status\n  isParentInActiveMeeting(parentSessionId: string): Promise<boolean>;\n  \n  // Queue Entries\n  getQueueEntry(id: string): Promise<QueueEntry | undefined>;\n  getQueueEntriesForTeacher(teacherId: string): Promise<any[]>;\n  getQueueEntriesForParent(parentSessionId: string): Promise<any[]>;\n  getAllQueueEntriesForTeacher(teacherId: string): Promise<any[]>;\n  isParentInTeacherQueue(parentSessionId: string, teacherId: string): Promise<boolean>;\n  createQueueEntry(entry: InsertQueueEntry): Promise<QueueEntry>;\n  updateQueueEntry(id: string, updates: Partial<QueueEntry>): Promise<QueueEntry | undefined>;\n  deleteQueueEntry(id: string): Promise<void>;\n  \n  // Meetings\n  getMeeting(id: string): Promise<Meeting | undefined>;\n  createMeetingIfTeacherFree(params: { teacherId: string; queueEntryId: string }): Promise<{ success: boolean; meeting?: Meeting }>;\n  endMeeting(meetingId: string): Promise<void>;\n  getActiveMeetingForTeacher(teacherId: string): Promise<Meeting | undefined>;\n  getActiveMeetingForParent(parentSessionId: string): Promise<Meeting | undefined>;\n  \n  // Admin\n  generateUniqueCode(teacherName: string): Promise<string>;\n}\n\nclass DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // CRITICAL SECURITY FIX: Hash password before storing\n    const hashedPassword = await bcrypt.hash(insertUser.password, 12);\n    const userWithHashedPassword = { ...insertUser, password: hashedPassword };\n    const [user] = await db.insert(users).values(userWithHashedPassword).returning();\n    return user;\n  }\n\n  async getTeacher(id: string): Promise<Teacher | undefined> {\n    const [teacher] = await db.select().from(teachers).where(eq(teachers.id, id));\n    return teacher || undefined;\n  }\n\n  async getTeacherByCode(code: string): Promise<Teacher | undefined> {\n    // CASE SENSITIVITY FIX: Normalize teacher codes to uppercase for matching\n    const normalizedCode = code.toUpperCase().trim();\n    const [teacher] = await db.select().from(teachers).where(eq(teachers.uniqueCode, normalizedCode));\n    return teacher || undefined;\n  }\n\n  async getTeacherByUserId(userId: string): Promise<Teacher | undefined> {\n    const [teacher] = await db.select().from(teachers).where(eq(teachers.userId, userId));\n    return teacher || undefined;\n  }\n\n  async getAllTeachers(): Promise<Teacher[]> {\n    return await db.select().from(teachers);\n  }\n\n  async createTeacher(insertTeacher: InsertTeacher, userId: string): Promise<Teacher> {\n    const uniqueCode = await this.generateUniqueCode(insertTeacher.name);\n    const [teacher] = await db.insert(teachers).values({\n      ...insertTeacher,\n      userId,\n      uniqueCode,\n    }).returning();\n    return teacher;\n  }\n\n  async updateTeacher(id: string, updates: Partial<Teacher>): Promise<Teacher | undefined> {\n    const [teacher] = await db.update(teachers)\n      .set(updates)\n      .where(eq(teachers.id, id))\n      .returning();\n    return teacher || undefined;\n  }\n\n  async getParentSession(sessionId: string): Promise<ParentSession | undefined> {\n    const [session] = await db.select().from(parentSessions).where(eq(parentSessions.sessionId, sessionId));\n    return session || undefined;\n  }\n\n  async createParentSession(session: InsertParentSession): Promise<ParentSession> {\n    const [newSession] = await db.insert(parentSessions).values(session).returning();\n    return newSession;\n  }\n\n  async isParentInActiveMeeting(parentSessionId: string): Promise<boolean> {\n    const [meeting] = await db.select().from(meetings)\n      .where(and(\n        eq(meetings.parentSessionId, parentSessionId),\n        isNull(meetings.endedAt)\n      ));\n    return !!meeting;\n  }\n\n  async getQueueEntry(id: string): Promise<QueueEntry | undefined> {\n    const [entry] = await db.select().from(queueEntries).where(eq(queueEntries.id, id));\n    return entry || undefined;\n  }\n\n  async getQueueEntriesForTeacher(teacherId: string): Promise<any[]> {\n    return await db.select({\n      id: queueEntries.id,\n      teacherId: queueEntries.teacherId,\n      parentSessionId: queueEntries.parentSessionId,\n      childName: queueEntries.childName,\n      status: queueEntries.status,\n      position: queueEntries.position,\n      joinedAt: queueEntries.joinedAt,\n      startedAt: queueEntries.startedAt,\n      parentName: parentSessions.parentName\n    })\n    .from(queueEntries)\n    .leftJoin(parentSessions, eq(queueEntries.parentSessionId, parentSessions.id))\n    .where(and(\n      eq(queueEntries.teacherId, teacherId),\n      isNull(queueEntries.completedAt)\n    ))\n    .orderBy(asc(queueEntries.position));\n  }\n\n  async getQueueEntriesForParent(parentSessionId: string): Promise<any[]> {\n    return await db.select({\n      id: queueEntries.id,\n      teacherId: queueEntries.teacherId,\n      parentSessionId: queueEntries.parentSessionId,\n      childName: queueEntries.childName,\n      status: queueEntries.status,\n      position: queueEntries.position,\n      joinedAt: queueEntries.joinedAt,\n      startedAt: queueEntries.startedAt,\n      teacherName: teachers.name,\n      teacherSubject: teachers.subject\n    })\n    .from(queueEntries)\n    .leftJoin(teachers, eq(queueEntries.teacherId, teachers.id))\n    .where(and(\n      eq(queueEntries.parentSessionId, parentSessionId),\n      isNull(queueEntries.completedAt)\n    ))\n    .orderBy(desc(queueEntries.joinedAt));\n  }\n\n  async getAllQueueEntriesForTeacher(teacherId: string): Promise<any[]> {\n    return await db.select({\n      id: queueEntries.id,\n      teacherId: queueEntries.teacherId,\n      parentSessionId: queueEntries.parentSessionId,\n      childName: queueEntries.childName,\n      status: queueEntries.status,\n      position: queueEntries.position,\n      joinedAt: queueEntries.joinedAt,\n      startedAt: queueEntries.startedAt,\n      completedAt: queueEntries.completedAt,\n      parentName: parentSessions.parentName\n    })\n    .from(queueEntries)\n    .leftJoin(parentSessions, eq(queueEntries.parentSessionId, parentSessions.id))\n    .where(eq(queueEntries.teacherId, teacherId))\n    .orderBy(desc(queueEntries.joinedAt));\n  }\n\n  async isParentInTeacherQueue(parentSessionId: string, teacherId: string): Promise<boolean> {\n    const [entry] = await db.select().from(queueEntries)\n      .where(and(\n        eq(queueEntries.parentSessionId, parentSessionId),\n        eq(queueEntries.teacherId, teacherId),\n        isNull(queueEntries.completedAt)\n      ));\n    return !!entry;\n  }\n\n  async createQueueEntry(entry: InsertQueueEntry): Promise<QueueEntry> {\n    return await db.transaction(async (trx) => {\n      // Lock all existing queue entries for this teacher to prevent position conflicts\n      // We can't use FOR UPDATE with MAX(), so we lock the table first, then calculate max\n      const existingEntries = await trx.select({ position: queueEntries.position })\n        .from(queueEntries)\n        .where(and(\n          eq(queueEntries.teacherId, entry.teacherId),\n          isNull(queueEntries.completedAt)\n        ))\n        .for('update'); // CRITICAL: Lock existing entries to prevent race conditions\n\n      // Calculate next position safely\n      const maxPosition = existingEntries.reduce((max, entry) => \n        Math.max(max, entry.position || 0), 0\n      );\n      const nextPosition = maxPosition + 1;\n\n      const [newEntry] = await trx.insert(queueEntries).values({\n        ...entry,\n        position: nextPosition\n      }).returning();\n\n      return newEntry;\n    }, { isolationLevel: 'serializable' }); // CRITICAL: SERIALIZABLE isolation prevents race conditions\n  }\n\n  async updateQueueEntry(id: string, updates: Partial<QueueEntry>): Promise<QueueEntry | undefined> {\n    const [entry] = await db.update(queueEntries)\n      .set(updates)\n      .where(eq(queueEntries.id, id))\n      .returning();\n    return entry || undefined;\n  }\n\n  async deleteQueueEntry(id: string): Promise<void> {\n    await db.delete(queueEntries).where(eq(queueEntries.id, id));\n  }\n\n  async getMeeting(id: string): Promise<Meeting | undefined> {\n    const [meeting] = await db.select().from(meetings).where(eq(meetings.id, id));\n    return meeting || undefined;\n  }\n\n  async createMeetingIfTeacherFree(params: { teacherId: string; queueEntryId: string }): Promise<{ success: boolean; meeting?: Meeting }> {\n    try {\n      const meeting = await db.transaction(async (trx) => {\n        // CRITICAL: Check if teacher is free with row lock\n        const [existingMeeting] = await trx.select().from(meetings)\n          .where(and(\n            eq(meetings.teacherId, params.teacherId),\n            isNull(meetings.endedAt)\n          ))\n          .for('update');\n\n        if (existingMeeting) {\n          throw new Error('Teacher is busy');\n        }\n\n        // Get queue entry details with lock\n        const [queueEntry] = await trx.select().from(queueEntries)\n          .where(eq(queueEntries.id, params.queueEntryId))\n          .for('update');\n\n        if (!queueEntry) {\n          throw new Error('Queue entry not found');\n        }\n\n        // Create meeting atomically\n        const [newMeeting] = await trx.insert(meetings).values({\n          teacherId: params.teacherId,\n          parentSessionId: queueEntry.parentSessionId,\n          queueEntryId: params.queueEntryId,\n          startedAt: new Date()\n        }).returning();\n\n        return newMeeting;\n      }, { isolationLevel: 'serializable' }); // CRITICAL: SERIALIZABLE isolation\n\n      return { success: true, meeting };\n    } catch (error) {\n      return { success: false };\n    }\n  }\n\n  async endMeeting(meetingId: string): Promise<void> {\n    await db.update(meetings)\n      .set({ endedAt: new Date() })\n      .where(eq(meetings.id, meetingId));\n  }\n\n  async getActiveMeetingForTeacher(teacherId: string): Promise<Meeting | undefined> {\n    const [meeting] = await db.select().from(meetings)\n      .where(and(\n        eq(meetings.teacherId, teacherId),\n        isNull(meetings.endedAt)\n      ));\n    return meeting || undefined;\n  }\n\n  async getActiveMeetingForParent(parentSessionId: string): Promise<Meeting | undefined> {\n    const [meeting] = await db.select().from(meetings)\n      .where(and(\n        eq(meetings.parentSessionId, parentSessionId),\n        isNull(meetings.endedAt)\n      ));\n    return meeting || undefined;\n  }\n\n  async generateUniqueCode(teacherName: string): Promise<string> {\n    const namePrefix = teacherName\n      .replace(/[^a-zA-Z0-9]/g, '')\n      .toUpperCase()\n      .substring(0, 3);\n\n    let attempts = 0;\n    do {\n      const randomSuffix = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n      const code = namePrefix + randomSuffix;\n      \n      const existing = await this.getTeacherByCode(code);\n      if (!existing) {\n        return code;\n      }\n      \n      attempts++;\n    } while (attempts < 100);\n    \n    return `${namePrefix}${Date.now().toString().slice(-3)}`;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":12492},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, uuid, boolean, integer, unique, index, uniqueIndex } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"parent\"), // parent, teacher, admin\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const teachers = pgTable(\"teachers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  subject: text(\"subject\").notNull(),\n  uniqueCode: text(\"unique_code\").notNull().unique(),\n  qrCode: text(\"qr_code\"), // Base64 encoded QR code\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const parentSessions = pgTable(\"parent_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull().unique(), // Browser session ID\n  parentName: text(\"parent_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const queueEntries = pgTable(\"queue_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").references(() => teachers.id).notNull(),\n  parentSessionId: varchar(\"parent_session_id\").references(() => parentSessions.id).notNull(),\n  childName: text(\"child_name\").notNull(),\n  status: text(\"status\").notNull().default(\"waiting\"), // waiting, next, current, completed, skipped\n  position: integer(\"position\").notNull(),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n  notifiedAt: timestamp(\"notified_at\"),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n}, (table) => ({\n  // Prevent duplicate parent+teacher combinations for ACTIVE statuses only (allow multiple completed/skipped)\n  uniqueActiveParentTeacher: uniqueIndex(\"ux_no_duplicate_active_parent_teacher\").on(table.parentSessionId, table.teacherId).where(sql`status IN ('waiting', 'next', 'current')`),\n  // Ensure unique positions per teacher for active queue entries\n  uniquePositionPerTeacher: uniqueIndex(\"ux_teacher_position_active\").on(table.teacherId, table.position).where(sql`status IN ('waiting', 'next', 'current')`),\n  // Ensure only one current status per teacher  \n  oneCurrentPerTeacher: uniqueIndex(\"ux_one_current_per_teacher\").on(table.teacherId).where(sql`status = 'current'`),\n}));\n\nexport const meetings = pgTable(\"meetings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").references(() => teachers.id).notNull(),\n  queueEntryId: varchar(\"queue_entry_id\").references(() => queueEntries.id).notNull(),\n  startedAt: timestamp(\"started_at\").defaultNow(),\n  endedAt: timestamp(\"ended_at\"),\n  duration: integer(\"duration\"), // in seconds\n  wasExtended: boolean(\"was_extended\").default(false),\n  extendedBy: integer(\"extended_by\").default(0), // in seconds\n}, (table) => ({\n  // Ensure only one active meeting per teacher\n  oneActiveMeetingPerTeacher: uniqueIndex(\"ux_one_active_meeting_per_teacher\").on(table.teacherId).where(sql`ended_at IS NULL`),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ one }) => ({\n  teacher: one(teachers, {\n    fields: [users.id],\n    references: [teachers.userId],\n  }),\n}));\n\nexport const teachersRelations = relations(teachers, ({ one, many }) => ({\n  user: one(users, {\n    fields: [teachers.userId],\n    references: [users.id],\n  }),\n  queueEntries: many(queueEntries),\n  meetings: many(meetings),\n}));\n\nexport const parentSessionsRelations = relations(parentSessions, ({ many }) => ({\n  queueEntries: many(queueEntries),\n}));\n\nexport const queueEntriesRelations = relations(queueEntries, ({ one }) => ({\n  teacher: one(teachers, {\n    fields: [queueEntries.teacherId],\n    references: [teachers.id],\n  }),\n  parentSession: one(parentSessions, {\n    fields: [queueEntries.parentSessionId],\n    references: [parentSessions.id],\n  }),\n  meeting: one(meetings, {\n    fields: [queueEntries.id],\n    references: [meetings.queueEntryId],\n  }),\n}));\n\nexport const meetingsRelations = relations(meetings, ({ one }) => ({\n  teacher: one(teachers, {\n    fields: [meetings.teacherId],\n    references: [teachers.id],\n  }),\n  queueEntry: one(queueEntries, {\n    fields: [meetings.queueEntryId],\n    references: [queueEntries.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeacherSchema = createInsertSchema(teachers).omit({\n  id: true,\n  userId: true,\n  uniqueCode: true,\n  qrCode: true,\n  createdAt: true,\n});\n\nexport const insertParentSessionSchema = createInsertSchema(parentSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQueueEntrySchema = createInsertSchema(queueEntries).omit({\n  id: true,\n  position: true,\n  joinedAt: true,\n  notifiedAt: true,\n  startedAt: true,\n  completedAt: true,\n});\n\nexport const insertMeetingSchema = createInsertSchema(meetings).omit({\n  id: true,\n  startedAt: true,\n  endedAt: true,\n  duration: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Teacher = typeof teachers.$inferSelect;\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\nexport type ParentSession = typeof parentSessions.$inferSelect;\nexport type InsertParentSession = z.infer<typeof insertParentSessionSchema>;\nexport type QueueEntry = typeof queueEntries.$inferSelect;\nexport type InsertQueueEntry = z.infer<typeof insertQueueEntrySchema>;\nexport type Meeting = typeof meetings.$inferSelect;\nexport type InsertMeeting = z.infer<typeof insertMeetingSchema>;\n","size_bytes":6069},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport ParentInterface from \"@/pages/parent\";\nimport TeacherInterface from \"@/pages/teacher\";\nimport AdminInterface from \"@/pages/admin\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ParentInterface} />\n      <Route path=\"/parent\" component={ParentInterface} />\n      <Route path=\"/teacher\" component={TeacherInterface} />\n      <Route path=\"/admin\" component={AdminInterface} />\n      <Route path=\"/queue/:code\" component={ParentInterface} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1056},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --radius: 0.5rem;\n  --font-sans: 'Roboto', sans-serif;\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Roboto', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom queue status styles */\n.queue-status-gray {\n  background: linear-gradient(135deg, #6B7280 0%, #9CA3AF 100%);\n}\n\n.queue-status-yellow {\n  background: linear-gradient(135deg, #F59E0B 0%, #FCD34D 100%);\n}\n\n.queue-status-green {\n  background: linear-gradient(135deg, #10B981 0%, #34D399 100%);\n}\n\n.queue-status-blue {\n  background: linear-gradient(135deg, #3B82F6 0%, #60A5FA 100%);\n}\n\n.timer-display {\n  font-family: 'Courier New', monospace;\n  font-weight: bold;\n}\n\n.notification-badge {\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n","size_bytes":5197},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/QRScanner.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Camera, X } from 'lucide-react';\n\ninterface QRScannerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onScan: (result: string) => void;\n}\n\nexport default function QRScanner({ isOpen, onClose, onScan }: QRScannerProps) {\n  const [isScanning, setIsScanning] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const streamRef = useRef<MediaStream | null>(null);\n\n  const startScanning = async () => {\n    try {\n      setError(null);\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: { facingMode: 'environment' }\n      });\n      \n      streamRef.current = stream;\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        setIsScanning(true);\n      }\n    } catch (err) {\n      setError('Camera access denied or not available');\n    }\n  };\n\n  const stopScanning = () => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop());\n      streamRef.current = null;\n    }\n    setIsScanning(false);\n  };\n\n  useEffect(() => {\n    if (!isOpen) {\n      stopScanning();\n    }\n  }, [isOpen]);\n\n  const handleManualEntry = () => {\n    stopScanning();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"qr-scanner-dialog\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Camera className=\"h-5 w-5\" />\n            Scan QR Code\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {!isScanning && !error && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"bg-muted rounded-lg p-8\">\n                <Camera className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-sm text-muted-foreground\">\n                  Position the QR code within the camera frame\n                </p>\n              </div>\n              <Button \n                onClick={startScanning} \n                className=\"w-full\"\n                data-testid=\"button-start-camera\"\n              >\n                <Camera className=\"h-4 w-4 mr-2\" />\n                Start Camera\n              </Button>\n            </div>\n          )}\n\n          {isScanning && (\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <video\n                  ref={videoRef}\n                  autoPlay\n                  playsInline\n                  className=\"w-full rounded-lg\"\n                  data-testid=\"camera-video\"\n                />\n                <div className=\"absolute inset-0 border-2 border-primary rounded-lg pointer-events-none\">\n                  <div className=\"absolute top-4 left-4 w-6 h-6 border-l-4 border-t-4 border-primary\"></div>\n                  <div className=\"absolute top-4 right-4 w-6 h-6 border-r-4 border-t-4 border-primary\"></div>\n                  <div className=\"absolute bottom-4 left-4 w-6 h-6 border-l-4 border-b-4 border-primary\"></div>\n                  <div className=\"absolute bottom-4 right-4 w-6 h-6 border-r-4 border-b-4 border-primary\"></div>\n                </div>\n              </div>\n              <Button \n                onClick={stopScanning} \n                variant=\"outline\" \n                className=\"w-full\"\n                data-testid=\"button-stop-camera\"\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Stop Camera\n              </Button>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"text-center space-y-4\">\n              <div className=\"bg-destructive/10 text-destructive p-4 rounded-lg\">\n                <p className=\"text-sm\">{error}</p>\n              </div>\n              <Button \n                onClick={handleManualEntry} \n                variant=\"outline\" \n                className=\"w-full\"\n                data-testid=\"button-manual-entry\"\n              >\n                Enter Code Manually Instead\n              </Button>\n            </div>\n          )}\n\n          <div className=\"text-center\">\n            <Button \n              onClick={onClose} \n              variant=\"ghost\" \n              size=\"sm\"\n              data-testid=\"button-close-scanner\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4641},"client/src/components/QueueCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { cn } from '@/lib/utils';\n\ninterface QueueCardProps {\n  status: 'waiting' | 'next' | 'current' | 'skipped';\n  teacherName: string;\n  subject: string;\n  childName: string;\n  className?: string;\n}\n\nconst statusConfig = {\n  waiting: {\n    bgClass: 'queue-status-gray',\n    title: 'IN QUEUE',\n    message: \"You're all set. We'll notify you when it's getting close.\",\n    pulseClass: ''\n  },\n  next: {\n    bgClass: 'queue-status-yellow',\n    title: 'GETTING CLOSE',\n    message: 'You are next in line. Please start making your way to the classroom.',\n    pulseClass: 'notification-badge'\n  },\n  current: {\n    bgClass: 'queue-status-green',\n    title: 'YOUR TURN NOW!',\n    message: 'The teacher is ready for you now. Please enter the classroom.',\n    pulseClass: 'notification-badge'\n  },\n  skipped: {\n    bgClass: 'queue-status-blue',\n    title: 'TURN SKIPPED',\n    message: 'Your turn was skipped because you were in another meeting. You have priority when your current meeting ends.',\n    pulseClass: ''\n  }\n};\n\nexport default function QueueCard({ \n  status, \n  teacherName, \n  subject, \n  childName, \n  className \n}: QueueCardProps) {\n  const config = statusConfig[status];\n\n  return (\n    <Card className={cn(\"overflow-hidden\", className)} data-testid={`card-queue-${status}`}>\n      <div className={cn(config.bgClass, config.pulseClass, \"text-white p-4 text-center\")}>\n        <div className=\"text-lg font-semibold\" data-testid={`text-status-${status}`}>\n          {config.title}\n        </div>\n        <div className=\"text-sm opacity-90\" data-testid={`text-message-${status}`}>\n          {config.message}\n        </div>\n      </div>\n      <CardContent className=\"p-4\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"font-medium text-foreground\" data-testid=\"text-teacher-name\">\n            {teacherName}\n          </span>\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"text-subject\">\n            {subject}\n          </span>\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          Student: <span data-testid=\"text-child-name\">{childName}</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2262},"client/src/components/TeacherCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport type { Teacher, QueueEntry, Meeting } from '@shared/schema';\nimport { cn } from '@/lib/utils';\n\ninterface TeacherCardProps {\n  teacher: Teacher;\n  currentMeeting?: Meeting & { queueEntry?: QueueEntry };\n  nextParent?: QueueEntry;\n  queueSize: number;\n}\n\nexport default function TeacherCard({ \n  teacher, \n  currentMeeting, \n  nextParent, \n  queueSize\n}: TeacherCardProps) {\n  const isHighQueue = queueSize >= 6;\n  \n  return (\n    <Card className={cn(\n      \"border-border\",\n      isHighQueue && \"border-orange-200 bg-orange-50\"\n    )} data-testid={`card-teacher-${teacher.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-3\">\n          <div>\n            <h4 className=\"font-semibold text-foreground\" data-testid=\"text-teacher-name\">\n              {teacher.name}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-teacher-details\">\n              {teacher.subject}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xs font-medium text-muted-foreground\">Code:</span>\n            <span className=\"text-sm font-bold text-primary\" data-testid=\"text-teacher-code\">\n              {teacher.uniqueCode}\n            </span>\n            {isHighQueue && (\n              <span className=\"bg-orange-200 text-orange-800 text-xs px-2 py-1 rounded\" data-testid=\"badge-high-queue\">\n                HIGH QUEUE\n              </span>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-4\">\n          <div className=\"bg-green-50 border border-green-200 rounded p-3\">\n            <div className=\"text-xs text-green-600 font-medium\">CURRENT MEETING</div>\n            {currentMeeting ? (\n              <>\n                <div className=\"text-sm font-semibold text-green-700\" data-testid=\"text-current-parent\">\n                  {(currentMeeting.queueEntry as any)?.parentSession?.parentName || 'Unknown Parent'}\n                </div>\n                <div className=\"text-xs text-green-600\">\n                  Meeting in progress\n                </div>\n              </>\n            ) : (\n              <div className=\"text-sm text-green-600\" data-testid=\"text-no-meeting\">No active meeting</div>\n            )}\n          </div>\n          \n          <div className=\"bg-yellow-50 border border-yellow-200 rounded p-3\">\n            <div className=\"text-xs text-yellow-600 font-medium\">NEXT UP</div>\n            {nextParent ? (\n              <>\n                <div className=\"text-sm font-semibold text-yellow-700\" data-testid=\"text-next-parent\">\n                  {(nextParent as any)?.parentSession?.parentName || 'Unknown Parent'}\n                </div>\n                <div className=\"text-xs text-yellow-600\">Ready to go</div>\n              </>\n            ) : (\n              <div className=\"text-sm text-yellow-600\" data-testid=\"text-no-next\">No one waiting</div>\n            )}\n          </div>\n          \n          <div className={cn(\n            \"rounded p-3\",\n            isHighQueue ? \"bg-red-50 border border-red-200\" : \"bg-blue-50 border border-blue-200\"\n          )}>\n            <div className={cn(\n              \"text-xs font-medium\",\n              isHighQueue ? \"text-red-600\" : \"text-blue-600\"\n            )}>\n              QUEUE SIZE\n            </div>\n            <div className={cn(\n              \"text-sm font-semibold\",\n              isHighQueue ? \"text-red-700\" : \"text-blue-700\"\n            )} data-testid=\"text-queue-size\">\n              {queueSize} waiting\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n","size_bytes":3735},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\ninterface UseWebSocketOptions {\n  sessionId?: string;\n  userType: 'parent' | 'teacher' | 'admin';\n  teacherId?: string;\n  parentSessionId?: string;\n  wsToken?: string; // JWT token for authentication\n}\n\nexport function useWebSocket(options: UseWebSocketOptions) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    function connectWebSocket() {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        setIsConnected(true);\n        \n        // CRITICAL SECURITY FIX: Use JWT authentication instead of identify\n        if (ws.current?.readyState === WebSocket.OPEN) {\n          if (options.wsToken) {\n            // Authenticate with JWT token\n            ws.current.send(JSON.stringify({\n              type: 'authenticate',\n              token: options.wsToken\n            }));\n          } else {\n            // Fallback for parent sessions without explicit token\n            ws.current.send(JSON.stringify({\n              type: 'identify',\n              sessionId: options.sessionId,\n              userType: options.userType,\n              teacherId: options.teacherId,\n              parentSessionId: options.parentSessionId\n            }));\n          }\n        }\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          setLastMessage(message);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      ws.current.onclose = () => {\n        setIsConnected(false);\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n    }\n\n    // Initial connection\n    connectWebSocket();\n\n    return () => {\n      ws.current?.close();\n    };\n  }, [options.sessionId, options.userType, options.teacherId, options.parentSessionId]);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage\n  };\n}\n","size_bytes":2532},"client/src/lib/qr-generator.ts":{"content":"export interface QRCodeData {\n  type: 'teacher_queue';\n  code: string;\n  teacherName: string;\n  subject: string;\n}\n\nexport function generateQRCodeData(teacher: {\n  uniqueCode: string;\n  name: string;\n  subject: string;\n}): string {\n  const qrData: QRCodeData = {\n    type: 'teacher_queue',\n    code: teacher.uniqueCode,\n    teacherName: teacher.name,\n    subject: teacher.subject\n  };\n  \n  return JSON.stringify(qrData);\n}\n\nexport function parseQRCodeData(qrString: string): QRCodeData | null {\n  try {\n    const data = JSON.parse(qrString);\n    if (data.type === 'teacher_queue' && data.code) {\n      return data;\n    }\n    return null;\n  } catch {\n    return null;\n  }\n}\n","size_bytes":673},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport TeacherCard from '@/components/TeacherCard';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Shield, Settings, Download, Plus, X, Printer, Copy, Edit3, Check, RotateCcw, RefreshCw } from 'lucide-react';\n\nexport default function AdminInterface() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showSetup, setShowSetup] = useState(false);\n  const [newTeacher, setNewTeacher] = useState({\n    name: '',\n    subject: ''\n  });\n  const [newTeacherCredentials, setNewTeacherCredentials] = useState<{\n    email: string;\n    password: string;\n    teacher: any;\n  } | null>(null);\n  const [editingPassword, setEditingPassword] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock admin authentication\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email === 'admin@school.edu' && password === 'admin123') {\n      setIsLoggedIn(true);\n    } else {\n      toast({\n        title: 'Invalid credentials',\n        description: 'Please check your email and password',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  // Get all teachers (for setup)\n  const { data: teachers = [], refetch: refetchTeachers } = useQuery({\n    queryKey: ['/api/admin/teachers'],\n    enabled: isLoggedIn\n  });\n\n  // Get teachers with queue data (for monitoring)\n  const { data: teachersWithQueues = [], refetch: refetchTeachersWithQueues } = useQuery({\n    queryKey: ['/api/admin/teachers-with-queues'],\n    enabled: isLoggedIn\n  });\n\n  // Get admin stats\n  const { data: stats = {} as any } = useQuery({\n    queryKey: ['/api/admin/stats'],\n    enabled: isLoggedIn\n  });\n\n  // WebSocket for real-time updates\n  const { lastMessage } = useWebSocket({\n    userType: 'admin'\n  });\n\n  // Handle WebSocket messages for real-time updates\n  useEffect(() => {\n    if (lastMessage) {\n      if (lastMessage.type === 'queue_update' || lastMessage.type === 'meeting_ended' || lastMessage.type === 'meeting_started') {\n        // Refetch both stats and teacher queue data\n        refetchTeachersWithQueues();\n        queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      }\n    }\n  }, [lastMessage, refetchTeachersWithQueues, queryClient]);\n\n  // Add teacher mutation\n  const addTeacherMutation = useMutation({\n    mutationFn: async (teacherData: typeof newTeacher) => {\n      const generatedPassword = generatePassword(teacherData.name);\n      const payload = {\n        ...teacherData,\n        password: generatedPassword\n      };\n      const response = await apiRequest('POST', '/api/admin/teachers', payload);\n      const data = await response.json();\n      return { ...data, generatedPassword };\n    },\n    onSuccess: (data) => {\n      refetchTeachers();\n      setNewTeacher({ name: '', subject: '' });\n      \n      // Store the credentials for display\n      const email = data.name.toLowerCase().replace(/\\s+/g, '.') + '@school.edu';\n      setNewTeacherCredentials({\n        email,\n        password: data.generatedPassword,\n        teacher: data\n      });\n      setEditingPassword(false);\n      \n      toast({\n        title: 'Teacher added successfully',\n        description: 'Login credentials generated. You can now print them.'\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error adding teacher',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  // Regenerate all QR codes and teacher codes mutation\n  const regenerateAllCodesMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/admin/regenerate-codes');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Regeneration successful:', data);\n      // Force refetch of teachers data\n      refetchTeachers();\n      // Invalidate all teacher-related queries\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/teachers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/teachers-with-queues'] });\n      \n      toast({\n        title: 'Codes regenerated successfully',\n        description: `Updated ${data.updatedCount} teacher codes and QR codes with unique values`\n      });\n    },\n    onError: (error) => {\n      console.error('Regeneration error:', error);\n      toast({\n        title: 'Error regenerating codes',\n        description: error.message,\n        variant: 'destructive'\n      });\n    }\n  });\n\n  // Generate teacher-name-based password\n  const generatePassword = (teacherName?: string) => {\n    if (teacherName) {\n      // Use teacher's name to create a friendly password\n      const nameParts = teacherName.split(' ');\n      const firstName = nameParts[0] || 'Teacher';\n      const lastName = nameParts[1] || '';\n      \n      // Take first 3-4 letters of first name + first 2 letters of last name + 3 numbers\n      const nameBase = (firstName.slice(0, 3) + (lastName.slice(0, 2) || '')).toLowerCase();\n      const numbers = Math.floor(100 + Math.random() * 900); // 3-digit number\n      \n      // Capitalize first letter\n      return nameBase.charAt(0).toUpperCase() + nameBase.slice(1) + numbers;\n    }\n    \n    // Fallback for when no name is provided\n    const words = ['Apple', 'Blue', 'Cat', 'Dog', 'Easy', 'Fast'];\n    const word = words[Math.floor(Math.random() * words.length)];\n    const numbers = Math.floor(100 + Math.random() * 900);\n    return word + numbers;\n  };\n\n  const handleAddTeacher = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newTeacher.name && newTeacher.subject) {\n      addTeacherMutation.mutate(newTeacher);\n    }\n  };\n\n  const handlePrintCredentials = () => {\n    if (!newTeacherCredentials) return;\n    \n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>Teacher Login Credentials</title>\n            <style>\n              body { font-family: Arial, sans-serif; padding: 40px; }\n              .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 20px; }\n              .credentials { background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0; }\n              .field { margin: 10px 0; }\n              .label { font-weight: bold; color: #555; }\n              .value { font-size: 16px; margin-left: 10px; }\n              .instructions { margin-top: 30px; line-height: 1.6; }\n              @media print { body { margin: 0; } }\n            </style>\n          </head>\n          <body>\n            <div class=\"header\">\n              <h1>Parent-Teacher Meeting System</h1>\n              <h2>Teacher Login Credentials</h2>\n            </div>\n            \n            <div class=\"credentials\">\n              <div class=\"field\">\n                <span class=\"label\">Teacher Name:</span>\n                <span class=\"value\">${newTeacherCredentials.teacher.name}</span>\n              </div>\n              <div class=\"field\">\n                <span class=\"label\">Subject:</span>\n                <span class=\"value\">${newTeacherCredentials.teacher.subject}</span>\n              </div>\n              <div class=\"field\">\n                <span class=\"label\">Queue Code:</span>\n                <span class=\"value\">${newTeacherCredentials.teacher.uniqueCode}</span>\n              </div>\n              <hr style=\"margin: 20px 0;\">\n              <div class=\"field\">\n                <span class=\"label\">Email/Username:</span>\n                <span class=\"value\">${newTeacherCredentials.email}</span>\n              </div>\n              <div class=\"field\">\n                <span class=\"label\">Password:</span>\n                <span class=\"value\">${newTeacherCredentials.password}</span>\n              </div>\n            </div>\n            \n            <div class=\"instructions\">\n              <h3>Instructions for Teacher:</h3>\n              <ol>\n                <li>Go to the Teacher Dashboard</li>\n                <li>Login with the email and password provided above</li>\n                <li>Your queue code is <strong>${newTeacherCredentials.teacher.uniqueCode}</strong> - share this with parents</li>\n                <li>Parents can scan your QR code or enter your queue code manually</li>\n                <li>Use the meeting controls to manage your queue during parent-teacher meetings</li>\n              </ol>\n              \n              <p style=\"margin-top: 20px; font-size: 14px; color: #666;\">\n                Keep these credentials secure. Contact the admin if you need to reset your password.\n              </p>\n            </div>\n          </body>\n        </html>\n      `);\n      printWindow.document.close();\n      printWindow.print();\n    }\n  };\n\n  const copyCredentials = async () => {\n    if (!newTeacherCredentials) return;\n    \n    const credentialsText = `Teacher Login Credentials\n\nTeacher: ${newTeacherCredentials.teacher.name}\nSubject: ${newTeacherCredentials.teacher.subject}\nQueue Code: ${newTeacherCredentials.teacher.uniqueCode}\n\nLogin Details:\nEmail: ${newTeacherCredentials.email}\nPassword: ${newTeacherCredentials.password}\n\nInstructions:\n1. Go to the Teacher Dashboard\n2. Login with the email and password above\n3. Share your queue code (${newTeacherCredentials.teacher.uniqueCode}) with parents\n4. Parents can scan QR code or enter queue code manually`;\n\n    try {\n      await navigator.clipboard.writeText(credentialsText);\n      toast({\n        title: 'Credentials copied',\n        description: 'Login credentials copied to clipboard'\n      });\n    } catch (error) {\n      toast({\n        title: 'Copy failed',\n        description: 'Unable to copy to clipboard',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  if (!isLoggedIn) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-lg\" data-testid=\"card-admin-login\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center mb-6\">\n              <Shield className=\"text-primary text-4xl mb-3 mx-auto\" />\n              <h2 className=\"text-2xl font-semibold text-foreground\">Admin Login</h2>\n              <p className=\"text-muted-foreground\">Access the command center</p>\n            </div>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"admin-email\">Email</Label>\n                <Input\n                  id=\"admin-email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"admin@school.edu\"\n                  required\n                  data-testid=\"input-admin-email\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"admin-password\">Password</Label>\n                <Input\n                  id=\"admin-password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Enter password\"\n                  required\n                  data-testid=\"input-admin-password\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-admin-login\">\n                Sign In\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header with Statistics */}\n        <Card className=\"shadow-lg\" data-testid=\"card-admin-header\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground\">PTM Command Center</h2>\n                <p className=\"text-muted-foreground\">Live event monitoring and management</p>\n              </div>\n              <div className=\"flex space-x-4\">\n                <Button \n                  onClick={() => setShowSetup(!showSetup)} \n                  variant=\"secondary\"\n                  data-testid=\"button-toggle-setup\"\n                >\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  Setup\n                </Button>\n                <Button data-testid=\"button-export-qr\">\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  Export QR Codes\n                </Button>\n              </div>\n            </div>\n            \n            {/* Statistics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-center\">\n                <div className=\"text-2xl font-bold text-blue-700\" data-testid=\"stat-total-teachers\">\n                  {stats?.totalTeachers || 0}\n                </div>\n                <div className=\"text-sm text-blue-600\">Total Teachers</div>\n              </div>\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n                <div className=\"text-2xl font-bold text-green-700\" data-testid=\"stat-active-meetings\">\n                  {stats?.activeMeetings || 0}\n                </div>\n                <div className=\"text-sm text-green-600\">Active Meetings</div>\n              </div>\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center\">\n                <div className=\"text-2xl font-bold text-yellow-700\" data-testid=\"stat-waiting-parents\">\n                  {stats?.waitingParents || 0}\n                </div>\n                <div className=\"text-sm text-yellow-600\">Parents Waiting</div>\n              </div>\n              <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4 text-center\">\n                <div className=\"text-2xl font-bold text-purple-700\" data-testid=\"stat-completed-meetings\">\n                  {stats?.completedMeetings || 0}\n                </div>\n                <div className=\"text-sm text-purple-600\">Completed Today</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Setup Interface */}\n        {showSetup && (\n          <Card className=\"shadow-lg\" data-testid=\"card-setup\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"text-xl font-semibold text-foreground\">Event Setup & QR Generation</h3>\n                <Button \n                  onClick={() => setShowSetup(false)} \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  data-testid=\"button-close-setup\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"text-lg font-medium text-foreground mb-4\">Add New Teacher</h4>\n                  <form onSubmit={handleAddTeacher} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"teacher-name\">Teacher Name</Label>\n                      <Input\n                        id=\"teacher-name\"\n                        value={newTeacher.name}\n                        onChange={(e) => setNewTeacher(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"e.g. Mrs. Johnson\"\n                        required\n                        data-testid=\"input-new-teacher-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"teacher-subject\">Subject</Label>\n                      <Input\n                        id=\"teacher-subject\"\n                        value={newTeacher.subject}\n                        onChange={(e) => setNewTeacher(prev => ({ ...prev, subject: e.target.value }))}\n                        placeholder=\"e.g. Mathematics\"\n                        required\n                        data-testid=\"input-new-teacher-subject\"\n                      />\n                    </div>\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\" \n                      disabled={addTeacherMutation.isPending}\n                      data-testid=\"button-add-teacher\"\n                    >\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      {addTeacherMutation.isPending ? 'Adding...' : 'Add Teacher & Generate Codes'}\n                    </Button>\n                  </form>\n                </div>\n\n                {/* Generated Codes Preview */}\n                <div>\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h4 className=\"text-lg font-medium text-foreground\">Generated Codes</h4>\n                    <Button \n                      onClick={() => regenerateAllCodesMutation.mutate()}\n                      disabled={regenerateAllCodesMutation.isPending}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      data-testid=\"button-regenerate-all-codes\"\n                    >\n                      <RefreshCw className=\"mr-2 h-4 w-4\" />\n                      {regenerateAllCodesMutation.isPending ? 'Regenerating...' : 'Regenerate All Codes'}\n                    </Button>\n                  </div>\n                  <div className=\"space-y-4\" data-testid=\"container-generated-codes\">\n                    {(teachers as any[]).map((teacher: any) => (\n                      <div key={teacher.id} className=\"border border-border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <div className=\"font-medium text-foreground\" data-testid={`text-teacher-${teacher.id}-name`}>\n                              {teacher.name}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\" data-testid={`text-teacher-${teacher.id}-details`}>\n                              {teacher.subject}\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-lg font-bold text-primary\" data-testid={`text-teacher-${teacher.id}-code`}>\n                              {teacher.uniqueCode}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"w-16 h-16 bg-black/10 rounded border flex items-center justify-center\">\n                            {teacher.qrCode ? (\n                              <img src={teacher.qrCode} alt=\"QR Code\" className=\"w-full h-full\" />\n                            ) : (\n                              <div className=\"text-xs text-muted-foreground\">QR</div>\n                            )}\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"secondary\"\n                              data-testid={`button-download-qr-${teacher.id}`}\n                            >\n                              <Download className=\"mr-1 h-3 w-3\" />\n                              Download QR\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"secondary\"\n                              data-testid={`button-print-${teacher.id}`}\n                            >\n                              <i className=\"fas fa-print mr-1\"></i>\n                              Print\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              {/* Generated Login Credentials */}\n              {newTeacherCredentials && (\n                <Card className=\"mt-6 border-green-200 bg-green-50\" data-testid=\"card-generated-credentials\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex justify-between items-center mb-4\">\n                      <h4 className=\"text-lg font-semibold text-green-800\">Generated Login Credentials</h4>\n                      <Button\n                        onClick={() => setNewTeacherCredentials(null)}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        data-testid=\"button-close-credentials\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"bg-white rounded-lg p-4 mb-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Teacher</div>\n                          <div className=\"font-medium\" data-testid=\"text-credentials-teacher\">\n                            {newTeacherCredentials.teacher.name}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Subject</div>\n                          <div className=\"font-medium\" data-testid=\"text-credentials-subject\">\n                            {newTeacherCredentials.teacher.subject}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Queue Code</div>\n                          <div className=\"font-bold text-primary\" data-testid=\"text-credentials-code\">\n                            {newTeacherCredentials.teacher.uniqueCode}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <hr className=\"my-4\" />\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Login Email</div>\n                          <div className=\"font-mono text-sm\" data-testid=\"text-credentials-email\">\n                            {newTeacherCredentials.email}\n                          </div>\n                        </div>\n                        <div>\n                          <div className=\"text-sm text-muted-foreground\">Password</div>\n                          <div className=\"flex items-center space-x-2\">\n                            {editingPassword ? (\n                              <div className=\"flex items-center space-x-1\">\n                                <Input\n                                  value={newTeacherCredentials.password}\n                                  onChange={(e) => setNewTeacherCredentials({\n                                    ...newTeacherCredentials,\n                                    password: e.target.value\n                                  })}\n                                  className=\"font-mono text-sm h-8\"\n                                  data-testid=\"input-edit-password\"\n                                />\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"ghost\"\n                                  onClick={() => setEditingPassword(false)}\n                                  data-testid=\"button-save-password\"\n                                >\n                                  <Check className=\"h-3 w-3\" />\n                                </Button>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"ghost\"\n                                  onClick={() => {\n                                    setNewTeacherCredentials({\n                                      ...newTeacherCredentials,\n                                      password: generatePassword(newTeacherCredentials.teacher.name)\n                                    });\n                                  }}\n                                  data-testid=\"button-regenerate-password\"\n                                >\n                                  <RotateCcw className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            ) : (\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"font-mono text-sm\" data-testid=\"text-credentials-password\">\n                                  {newTeacherCredentials.password}\n                                </span>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"ghost\"\n                                  onClick={() => setEditingPassword(true)}\n                                  data-testid=\"button-edit-password\"\n                                >\n                                  <Edit3 className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-3\">\n                      <Button \n                        onClick={handlePrintCredentials}\n                        className=\"flex-1\"\n                        data-testid=\"button-print-credentials\"\n                      >\n                        <Printer className=\"mr-2 h-4 w-4\" />\n                        Print Credentials\n                      </Button>\n                      <Button \n                        onClick={copyCredentials}\n                        variant=\"secondary\"\n                        className=\"flex-1\"\n                        data-testid=\"button-copy-credentials\"\n                      >\n                        <Copy className=\"mr-2 h-4 w-4\" />\n                        Copy to Clipboard\n                      </Button>\n                    </div>\n                    \n                    <div className=\"mt-4 space-y-2\">\n                      <div className=\"text-sm text-green-700 bg-green-100 p-3 rounded\">\n                        <strong>Give these credentials to the teacher:</strong> They need both the email and password to access their dashboard and manage their queue.\n                      </div>\n                      <div className=\"text-xs text-muted-foreground bg-blue-50 p-2 rounded\">\n                        💡 <strong>Name-Based Password:</strong> Generated using teacher's name for easy remembering. Click the edit icon to customize if needed.\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Live Event Monitoring */}\n        <Card className=\"shadow-lg\" data-testid=\"card-live-monitoring\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-foreground mb-4\">Live Event Status</h3>\n            <div className=\"grid gap-4\" data-testid=\"container-teacher-cards\">\n              {(teachersWithQueues as any[]).map((teacher: any) => (\n                <TeacherCard\n                  key={teacher.id}\n                  teacher={teacher}\n                  currentMeeting={teacher.currentMeeting}\n                  nextParent={teacher.nextParent}\n                  queueSize={teacher.queueSize}\n                />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":28562},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/parent.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport QRScanner from '@/components/QRScanner';\nimport QueueCard from '@/components/QueueCard';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Smartphone, Plus, Camera, Hash } from 'lucide-react';\n\nexport default function ParentInterface() {\n  const [location] = useLocation();\n  // CRITICAL FIX: Use state for sessionId so we can update it with server-returned sessionId\n  const [sessionId, setSessionId] = useState(() => {\n    // First check for server session ID\n    const serverSessionId = localStorage.getItem('ptm_server_session');\n    if (serverSessionId) {\n      return serverSessionId;\n    }\n    \n    // Fallback to device session for initial creation\n    let deviceSessionId = localStorage.getItem('ptm_device_session');\n    if (!deviceSessionId) {\n      // Create a device-specific session ID for initial request\n      deviceSessionId = `device-${Date.now()}-${crypto.randomUUID()}`;\n      localStorage.setItem('ptm_device_session', deviceSessionId);\n    }\n    return deviceSessionId;\n  });\n  const [currentStep, setCurrentStep] = useState<'welcome' | 'join' | 'child-info' | 'dashboard'>('welcome');\n  const [showQRScanner, setShowQRScanner] = useState(false);\n  const [selectedTeacher, setSelectedTeacher] = useState<any>(null);\n  const [parentName, setParentName] = useState('');\n  const [childName, setChildName] = useState('');\n  const [childGrade, setChildGrade] = useState('Not specified');\n  const [teacherCode, setTeacherCode] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check if coming from QR code URL\n  useEffect(() => {\n    const pathMatch = location.match(/^\\/queue\\/(.+)$/);\n    if (pathMatch) {\n      const code = pathMatch[1];\n      setTeacherCode(code.toUpperCase());\n      handleTeacherCodeSubmit(code.toUpperCase());\n    }\n  }, [location]);\n\n\n  // Check if parent session exists\n  const { data: parentSession } = useQuery<{id: string, sessionId: string, parentName: string} | null>({\n    queryKey: ['/api/parent/session', sessionId],\n    enabled: !!sessionId\n  });\n\n  // Get parent's queues - using sessionId not parentSession.id\n  const { data: allQueues = [], refetch: refetchQueues } = useQuery({\n    queryKey: [`/api/parent/${sessionId}/queues`],\n    enabled: !!parentSession && !!sessionId\n  });\n\n  // Filter to show active queues (not completed)\n  const parentQueues = Array.isArray(allQueues) ? allQueues.filter((queue: any) =>\n    queue.status === 'waiting' || queue.status === 'next' || queue.status === 'current' || queue.status === 'skipped'\n  ) : [];\n\n  // WebSocket for real-time updates\n  const { lastMessage } = useWebSocket({\n    sessionId,\n    userType: 'parent',\n    parentSessionId: parentSession?.id || sessionId\n  });\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (lastMessage) {\n      if (lastMessage.type === 'status_update' || lastMessage.type === 'queue_update') {\n        refetchQueues();\n        if (lastMessage.message) {\n          toast({\n            title: lastMessage.message,\n            description: lastMessage.description || 'Your queue status has been updated',\n            duration: 5000\n          });\n        }\n      } else if (lastMessage.type === 'delay_notification') {\n        toast({\n          title: 'Meeting Delayed',\n          description: lastMessage.message,\n          duration: 5000\n        });\n      } else if (lastMessage.type === 'queue_removed') {\n        refetchQueues();\n        toast({\n          title: 'Queue Update',\n          description: 'You have been removed from the queue',\n          duration: 5000\n        });\n      }\n    }\n  }, [lastMessage, refetchQueues, toast]);\n\n  // Auto-refresh queue data every 30 seconds to prevent stale data\n  useEffect(() => {\n    const interval = setInterval(() => {\n      refetchQueues();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [refetchQueues]);\n\n  // Create parent session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (name: string) => {\n      const response = await apiRequest('POST', '/api/parent/session', {\n        sessionId,\n        parentName: name\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // CRITICAL FIX: Update sessionId with server-returned sessionId\n      console.log('Session creation successful:', { \n        serverReturned: data.sessionId, \n        currentClientSessionId: sessionId,\n        fullResponse: data \n      });\n      if (data.sessionId && data.sessionId !== sessionId) {\n        console.log('Updating client sessionId from', sessionId, 'to', data.sessionId);\n        setSessionId(data.sessionId);\n        localStorage.setItem('ptm_server_session', data.sessionId);\n        // Remove old device session since we now have server session\n        localStorage.removeItem('ptm_device_session');\n        console.log('Updated localStorage:', {\n          serverSession: localStorage.getItem('ptm_server_session'),\n          deviceSession: localStorage.getItem('ptm_device_session')\n        });\n      } else {\n        console.log('No sessionId update needed or sessionId missing from response');\n      }\n      setCurrentStep('join');\n      // Invalidate with new sessionId\n      queryClient.invalidateQueries({ queryKey: ['/api/parent/session', data.sessionId || sessionId] });\n    }\n  });\n\n  // Join queue mutation\n  const joinQueueMutation = useMutation({\n    mutationFn: async (data: { teacherCode: string; childName: string }) => {\n      console.log('Joining queue with data:', { sessionId, ...data });\n      const response = await apiRequest('POST', '/api/parent/join-queue', {\n        sessionId,\n        ...data\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to join queue');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      setCurrentStep('dashboard');\n      setChildName('');\n      setTeacherCode('');\n      setSelectedTeacher(null);\n      refetchQueues();\n      toast({\n        title: 'Successfully joined queue',\n        description: 'You\\'ll be notified when it\\'s your turn'\n      });\n    },\n    onError: (error) => {\n      console.log('Join queue error:', error.message);\n      if (error.message.includes('already in this teacher\\'s queue')) {\n        // Parent is already in queue, just go to dashboard\n        setCurrentStep('dashboard');\n        refetchQueues();\n        toast({\n          title: 'Already in queue',\n          description: 'You\\'re already in this teacher\\'s queue',\n        });\n      } else {\n        toast({\n          title: 'Error joining queue',\n          description: error.message,\n          variant: 'destructive'\n        });\n      }\n    }\n  });\n\n  // Set initial step based on session (only on first load)\n  useEffect(() => {\n    if (parentSession && currentStep === 'welcome') {\n      setCurrentStep(parentQueues.length > 0 ? 'dashboard' : 'join');\n    }\n  }, [parentSession, parentQueues, currentStep]);\n\n  const handleParentNameSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (parentName.trim()) {\n      createSessionMutation.mutate(parentName.trim());\n    }\n  };\n\n  const handleTeacherCodeSubmit = async (code: string) => {\n    try {\n      console.log('Looking up teacher with code:', code);\n      const response = await fetch(`/api/teachers/by-code/${code}`);\n      if (!response.ok) {\n        throw new Error('Teacher not found');\n      }\n      const teacher = await response.json();\n      console.log('Teacher found:', teacher);\n      setSelectedTeacher(teacher);\n      setCurrentStep('child-info');\n    } catch (error) {\n      console.log('Teacher lookup failed:', error);\n      toast({\n        title: 'Invalid code',\n        description: 'Please check the teacher code and try again',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleQRScan = (result: string) => {\n    try {\n      const qrData = JSON.parse(result);\n      if (qrData.type === 'teacher_queue' && qrData.code) {\n        handleTeacherCodeSubmit(qrData.code);\n        setShowQRScanner(false);\n      }\n    } catch (error) {\n      toast({\n        title: 'Invalid QR code',\n        description: 'Please scan a valid teacher QR code',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleChildInfoSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Child info form submitted:', { childName, selectedTeacher });\n    \n    if (!childName.trim()) {\n      console.log('Child name is empty');\n      toast({\n        title: 'Missing Information',\n        description: 'Please enter your child\\'s name',\n        variant: 'destructive'\n      });\n      return;\n    }\n    \n    if (!selectedTeacher) {\n      console.log('No teacher selected');\n      toast({\n        title: 'No Teacher Selected',\n        description: 'Please go back and select a teacher',\n        variant: 'destructive'\n      });\n      return;\n    }\n    \n    console.log('Calling join queue mutation with:', {\n      teacherCode: selectedTeacher.uniqueCode,\n      childName: childName.trim()\n    });\n    \n    joinQueueMutation.mutate({\n      teacherCode: selectedTeacher.uniqueCode,\n      childName: childName.trim()\n    });\n  };\n\n  const handleManualCodeSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (teacherCode.trim()) {\n      handleTeacherCodeSubmit(teacherCode.trim().toUpperCase());\n    }\n  };\n\n  if (currentStep === 'welcome') {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-md mx-auto space-y-6\">\n          <Card className=\"shadow-lg\" data-testid=\"card-welcome\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"mb-6\">\n                <Smartphone className=\"text-primary text-4xl mb-3 mx-auto\" />\n                <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Welcome to PTM</h2>\n                <p className=\"text-muted-foreground\">Let's get you set up for today's parent-teacher meetings</p>\n              </div>\n              <form onSubmit={handleParentNameSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"parent-name\" className=\"block text-sm font-medium text-foreground mb-2\">\n                    Your Name\n                  </Label>\n                  <Input\n                    id=\"parent-name\"\n                    type=\"text\"\n                    value={parentName}\n                    onChange={(e) => setParentName(e.target.value)}\n                    placeholder=\"Enter your name\"\n                    required\n                    data-testid=\"input-parent-name\"\n                  />\n                </div>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={createSessionMutation.isPending}\n                  data-testid=\"button-get-started\"\n                >\n                  {createSessionMutation.isPending ? 'Setting up...' : 'Get Started'}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 'join') {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-md mx-auto space-y-6\">\n          <Card className=\"shadow-lg\" data-testid=\"card-join-queue\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center mb-6\">\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">Join a Teacher's Queue</h2>\n                <p className=\"text-muted-foreground\">Scan the QR code or enter the teacher's unique code</p>\n              </div>\n              \n              {/* QR Scanner */}\n              <div className=\"bg-muted rounded-lg p-6 text-center mb-4\">\n                <Camera className=\"text-4xl text-muted-foreground mb-3 mx-auto\" />\n                <p className=\"text-sm text-muted-foreground mb-3\">Point your camera at the QR code</p>\n                <Button \n                  onClick={() => setShowQRScanner(true)}\n                  data-testid=\"button-scan-qr\"\n                >\n                  <Camera className=\"mr-2 h-4 w-4\" />\n                  Scan QR Code\n                </Button>\n              </div>\n\n              {/* Manual Code Entry */}\n              <div className=\"border-t border-border pt-4\">\n                <p className=\"text-center text-muted-foreground mb-3\">or enter the code manually</p>\n                <form onSubmit={handleManualCodeSubmit} className=\"space-y-3\">\n                  <Input\n                    type=\"text\"\n                    value={teacherCode}\n                    onChange={(e) => setTeacherCode(e.target.value.toUpperCase())}\n                    placeholder=\"e.g. JONES7\"\n                    className=\"text-center uppercase\"\n                    data-testid=\"input-teacher-code\"\n                  />\n                  <Button \n                    type=\"submit\" \n                    variant=\"secondary\" \n                    className=\"w-full\"\n                    data-testid=\"button-join-queue\"\n                  >\n                    <Hash className=\"mr-2 h-4 w-4\" />\n                    Join Queue\n                  </Button>\n                </form>\n              </div>\n            </CardContent>\n          </Card>\n\n          <QRScanner\n            isOpen={showQRScanner}\n            onClose={() => setShowQRScanner(false)}\n            onScan={handleQRScan}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  if (currentStep === 'child-info' && selectedTeacher) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"max-w-md mx-auto space-y-6\">\n          <Card className=\"shadow-lg\" data-testid=\"card-child-info\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-xl font-semibold text-foreground mb-4\">Child Information</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Please provide your child's details for{' '}\n                <span className=\"font-medium text-foreground\" data-testid=\"text-selected-teacher\">\n                  {selectedTeacher.name}\n                </span>\n              </p>\n              \n              <form onSubmit={handleChildInfoSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"child-name\" className=\"block text-sm font-medium text-foreground mb-2\">\n                    Child's Name\n                  </Label>\n                  <Input\n                    id=\"child-name\"\n                    type=\"text\"\n                    value={childName}\n                    onChange={(e) => setChildName(e.target.value)}\n                    placeholder=\"Enter child's name\"\n                    required\n                    data-testid=\"input-child-name\"\n                  />\n                </div>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={joinQueueMutation.isPending}\n                  data-testid=\"button-join-teacher-queue\"\n                >\n                  {joinQueueMutation.isPending ? 'Joining...' : 'Join Queue'}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-md mx-auto space-y-6\">\n        <div className=\"text-center mb-6\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Your Queues</h2>\n          <p className=\"text-muted-foreground\">We'll notify you when it's time</p>\n        </div>\n\n        <div className=\"space-y-4\" data-testid=\"container-queue-list\">\n          {parentQueues.map((queue: any) => (\n            <QueueCard\n              key={queue.id}\n              status={queue.status as 'waiting' | 'next' | 'current' | 'skipped'}\n              teacherName={queue.teacher?.name || 'Teacher'}\n              subject={queue.teacher?.subject || ''}\n              childName={queue.childName}\n            />\n          ))}\n        </div>\n\n        <Button \n          onClick={() => setCurrentStep('join')} \n          variant=\"secondary\" \n          className=\"w-full\"\n          data-testid=\"button-join-another\"\n        >\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Join Another Queue\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16906},"client/src/pages/teacher.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Presentation, Check, UserX } from 'lucide-react';\n\nexport default function TeacherInterface() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [teacherId, setTeacherId] = useState<string | null>(null);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get teacher data after login\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/teacher/login', credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setIsLoggedIn(true);\n      setTeacherId(data.teacher.id);\n    },\n    onError: () => {\n      toast({\n        title: 'Invalid credentials',\n        description: 'Please check your email and password',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  // Get teacher data\n  const { data: teacher } = useQuery({\n    queryKey: ['/api/teacher', teacherId],\n    enabled: !!teacherId && isLoggedIn\n  });\n\n  // Get teacher's queue\n  const { data: queue = [], refetch: refetchQueue } = useQuery({\n    queryKey: ['/api/teacher', teacherId, 'queue'],\n    enabled: !!teacherId && isLoggedIn\n  });\n\n  // Get current meeting\n  const { data: currentMeeting, refetch: refetchMeeting } = useQuery({\n    queryKey: ['/api/teacher', teacherId, 'current-meeting'],\n    enabled: !!teacherId && isLoggedIn\n  });\n\n  // WebSocket for real-time updates\n  const { lastMessage } = useWebSocket({\n    userType: 'teacher',\n    teacherId: teacherId || undefined\n  });\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (lastMessage) {\n      if (lastMessage.type === 'queue_update' || lastMessage.type === 'meeting_ended') {\n        refetchQueue();\n        refetchMeeting();\n      }\n    }\n  }, [lastMessage, refetchQueue, refetchMeeting]);\n\n\n  // End meeting mutation\n  const endMeetingMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', `/api/teacher/${teacherId}/end-meeting`);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchQueue();\n      refetchMeeting();\n      toast({\n        title: 'Meeting ended',\n        description: 'Next parent has been notified'\n      });\n    }\n  });\n\n\n  // Skip no-show mutation\n  const skipNoShowMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', `/api/teacher/${teacherId}/skip-no-show`);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchQueue();\n      refetchMeeting();\n      toast({\n        title: 'Parent skipped',\n        description: 'Next parent has been notified'\n      });\n    }\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (email && password) {\n      loginMutation.mutate({ email, password });\n    }\n  };\n\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setTeacherId(null);\n    setEmail('');\n    setPassword('');\n    toast({\n      title: 'Logged out',\n      description: 'You have been successfully logged out'\n    });\n  };\n\n\n  if (!isLoggedIn) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-lg\" data-testid=\"card-teacher-login\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center mb-6\">\n              <Presentation className=\"text-primary text-4xl mb-3 mx-auto\" />\n              <h2 className=\"text-2xl font-semibold text-foreground\">Teacher Login</h2>\n              <p className=\"text-muted-foreground\">Access your queue dashboard</p>\n            </div>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"teacher-email\">Email</Label>\n                <Input\n                  id=\"teacher-email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"teacher@school.edu\"\n                  required\n                  data-testid=\"input-teacher-email\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"teacher-password\">Password</Label>\n                <Input\n                  id=\"teacher-password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Enter password\"\n                  required\n                  data-testid=\"input-teacher-password\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-teacher-login\">\n                Sign In\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const queueArray = Array.isArray(queue) ? queue : [];\n  const currentParent = queueArray.find((entry: any) => entry.status === 'current');\n  const nextParent = queueArray.find((entry: any) => entry.status === 'next') || queueArray.find((entry: any) => entry.status === 'waiting');\n  const waitingParents = queueArray.filter((entry: any) => entry.status === 'waiting' && entry.id !== nextParent?.id);\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card className=\"shadow-lg\" data-testid=\"card-teacher-header\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-teacher-name\">\n                  {(teacher as any)?.name || 'Loading...'}\n                </h2>\n                <p className=\"text-muted-foreground\" data-testid=\"text-teacher-subject\">\n                  {(teacher as any)?.subject || ''}\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-right\">\n                  <div className=\"text-sm text-muted-foreground\">Queue Code</div>\n                  <div className=\"text-xl font-bold text-primary\" data-testid=\"text-queue-code\">\n                    {(teacher as any)?.uniqueCode || ''}\n                  </div>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={handleLogout}\n                  className=\"text-muted-foreground hover:text-foreground\"\n                  data-testid=\"button-teacher-logout\"\n                >\n                  <svg className=\"mr-2 h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n                  </svg>\n                  Log Out\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Current Meeting */}\n          <Card className=\"shadow-lg\" data-testid=\"card-current-meeting\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Current Meeting</h3>\n              <div className=\"text-center space-y-4\">\n                {currentMeeting ? (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                    <div className=\"text-2xl font-semibold text-green-700\" data-testid=\"text-current-parent\">\n                      {(currentMeeting as any)?.queueEntry?.parentName || 'Unknown Parent'}\n                    </div>\n                    <div className=\"text-green-600\" data-testid=\"text-current-student\">\n                      Student: {(currentMeeting as any)?.queueEntry?.childName || 'Unknown Student'}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"bg-muted rounded-lg p-4\">\n                    <div className=\"text-muted-foreground\" data-testid=\"text-no-current-meeting\">\n                      No active meeting\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Queue Management */}\n          <Card className=\"shadow-lg\" data-testid=\"card-queue-management\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4\">Up Next & Queue</h3>\n              \n              {/* Next Parent */}\n              {nextParent && (\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4\">\n                  <div className=\"text-sm text-yellow-600 font-medium\">NEXT</div>\n                  <div className=\"font-semibold text-yellow-700\" data-testid=\"text-next-parent-name\">\n                    {nextParent.parentSession?.parentName || 'Unknown Parent'}\n                  </div>\n                  <div className=\"text-sm text-yellow-600\">\n                    Student: <span data-testid=\"text-next-child\">{nextParent.childName}</span>\n                  </div>\n                </div>\n              )}\n\n              {/* Waiting List */}\n              <div className=\"space-y-2\">\n                <div className=\"text-sm font-medium text-muted-foreground\">\n                  Waiting ({waitingParents.length})\n                </div>\n                <div className=\"space-y-2\" data-testid=\"container-waiting-list\">\n                  {waitingParents.map((parent: any, index: number) => (\n                    <div key={parent.id} className=\"flex justify-between items-center py-2 px-3 bg-muted rounded-md\">\n                      <div>\n                        <div className=\"text-sm font-medium text-foreground\" data-testid={`text-waiting-parent-${index}`}>\n                          {parent.parentSession?.parentName || 'Unknown Parent'}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\" data-testid={`text-waiting-student-${index}`}>\n                          Student: {parent.childName}\n                        </div>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\" data-testid={`text-wait-time-${index}`}>\n                        Position {parent.position}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Control Buttons */}\n        <Card className=\"shadow-lg\" data-testid=\"card-meeting-controls\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">Meeting Controls</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Button \n                onClick={() => endMeetingMutation.mutate()}\n                disabled={endMeetingMutation.isPending || skipNoShowMutation.isPending || !currentMeeting}\n                className=\"py-3 px-6 flex items-center justify-center\"\n                data-testid=\"button-end-meeting\"\n              >\n                <Check className=\"mr-2 h-4 w-4\" />\n                {endMeetingMutation.isPending ? 'Ending...' : 'End Meeting'}\n              </Button>\n              <Button \n                onClick={() => skipNoShowMutation.mutate()}\n                disabled={skipNoShowMutation.isPending || endMeetingMutation.isPending || !currentMeeting}\n                variant=\"destructive\"\n                className=\"py-3 px-6 flex items-center justify-center\"\n                data-testid=\"button-skip-no-show\"\n              >\n                <UserX className=\"mr-2 h-4 w-4\" />\n                {skipNoShowMutation.isPending ? 'Skipping...' : 'Skip / No-Show'}\n              </Button>\n            </div>\n            <div className=\"mt-4 text-sm text-muted-foreground text-center\">\n              <i className=\"fas fa-info-circle mr-1\"></i>\n              The system automatically handles conflicts and notifications\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12772},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/migrate-passwords.ts":{"content":"// One-time migration script to hash existing plaintext passwords\nimport { db } from './db';\nimport { users } from '@shared/schema';\nimport bcrypt from 'bcryptjs';\nimport { eq } from 'drizzle-orm';\n\nasync function migratePasswords() {\n  console.log('Starting password migration...');\n  \n  try {\n    // Get all users\n    const allUsers = await db.select().from(users);\n    \n    for (const user of allUsers) {\n      // Check if password is already hashed (bcrypt hashes start with $2b$)\n      if (user.password.startsWith('$2b$')) {\n        console.log(`User ${user.username} already has hashed password, skipping...`);\n        continue;\n      }\n      \n      // Hash the plaintext password\n      const hashedPassword = await bcrypt.hash(user.password, 12);\n      \n      // Update the user with hashed password\n      await db.update(users)\n        .set({ password: hashedPassword })\n        .where(eq(users.id, user.id));\n        \n      console.log(`Migrated password for user: ${user.username}`);\n    }\n    \n    console.log('Password migration completed successfully!');\n  } catch (error) {\n    console.error('Error during password migration:', error);\n    throw error;\n  }\n}\n\n// Run migration if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  migratePasswords()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error('Migration failed:', error);\n      process.exit(1);\n    });\n}\n\nexport { migratePasswords };","size_bytes":1470}},"version":1}